zdbb() {
    cd $HOME/zelus/basketball
    DIR=`find * -maxdepth 0 -type d -print 2> /dev/null | fzf-tmux` \
        && cd "$DIR"
}
zdg() {
  cd $HOME/zelus/general
  DIR=`find * -maxdepth 0 -type d -print 2> /dev/null | fzf-tmux` \
    && cd "$DIR"
}
zdes() {
  cd $HOME/zelus/esports
  DIR=`find * -maxdepth 0 -type d -print 2> /dev/null | fzf-tmux` \
    && cd "$DIR"
}
zdfb() {
  cd $HOME/zelus/football
  DIR=`find * -maxdepth 0 -type d -print 2> /dev/null | fzf-tmux` \
    && cd "$DIR"
}
zgcp() {
  PROJECT=$(gcloud config configurations list --format json | jq -r ".[] | .name" | fzf-tmux)
  gcloud config configurations activate "$PROJECT"
}
model-dev-tag() {
  GIT_TIMESTAMP=$(date -u "+%Y%m%d.%H%M%S");
  if [[ $# -eq 2 ]] ; then
     echo "Tagging and pushing with dev-$1/cthayer/$2-$GIT_TIMESTAMP"
     sleep 3
     git tag dev-$1/cthayer/$2-$GIT_TIMESTAMP
     git push origin dev-$1/cthayer/$2-$GIT_TIMESTAMP
  else
     echo "Error: requires exactly two arguments"
  fi
}
glogone() {
    DEFAULT=10
    NUM_COMMITS="${1:-$DEFAULT}"
    git --no-pager log --oneline -n $NUM_COMMITS
}
killpods() {
    # app=bkrdp-ss, bkrdp-ngss, bkie
    # model=basketball-adjusted-plus-minus
    kubectl delete pods -l $1 
}
killjobs() {
    # app=bkrdp-ss, bkrdp-ngss, bkie
    # model=basketball-adjusted-plus-minus
    kubectl delete jobs -l $1
}
wpod() {
  # Arg $1 - seconds to refresh
  # Arg $2 - part of pod name to grep

    watch -n $1 "kubectl get pod | grep $2"
}
wjob() {
    watch -n $1 "kubectl get job | grep $2"
}
zmvbbd() {
    kubectl port-forward svc/zelus-model-versioner -n zelus-model-versioner :80 | cloud_sql_proxy -instances=zelus-basketball-dev:us-central1:basketball-data=tcp:5432
}
dev-tag() {
  # Arg $1 - sport name
  # Arg $2 - dev tag label typically a JIRA ticket number

  GIT_TIMESTAMP=$(date -u "+%Y%m%d.%H%M%S");
  if [[ $# -eq 2 ]] ; then
     echo "Tagging and pushing with dev-$1-ct-$2-$GIT_TIMESTAMP"
     sleep 3
     git tag dev-$1-ct-$2-$GIT_TIMESTAMP
     git push origin dev-$1-ct-$2-$GIT_TIMESTAMP
  else
     echo "Error: requires exactly two argument"
  fi
}
release-tag() {
  # Arg $1 - commit SHA to be release tagged
  # Arg $2 - release number
  echo "Checking out and pulling main branch"
  git checkout main
  git pull

  echo "Checking out commit: $1"
  git checkout $1
  git pull origin $1

  GIT_TIMESTAMP=$(date -u "+%Y%m%d.%H%M%S")
  SPORT=basketball
  RELEASE=$2

  echo "Sport: $SPORT; Release: $RELEASE; Timestamp: $GIT_TIMESTAMP"
  echo "Tagging and pushing"
  git tag release-$SPORT-$RELEASE-$GIT_TIMESTAMP
  git push origin release-$SPORT-$RELEASE-$GIT_TIMESTAMP
  echo "Release tag complete"
}

# delete all branches merged into main
dam() {
  echo "=== Deleting all branches (besides main and dev-basketball) ==="
  git checkout main && git branch | egrep -v "(^\*|main)" | egrep -v "(^\*|dev-basketball)" | xargs git branch -D
  echo "☑️  Done!"
}

# create a new branch
function new-branch() {
  if [[ $# -eq 0 ]]; then
    echo "Usage: new_branch <jira-ticket>"
    return 1
  fi

  local jira_ticket=$1
  local branch_name="casey/${jira_ticket}"

  # check if branch already exists
  if git rev-parse --git-dir > /dev/null 2>&1; then
    # create and switch to new branch
    git checkout -b "$branch_name"
    echo "Created new branch: $branch_name"

    # push the new branch to remote
    git push -u origin "$branch_name"
    echo "Pushed new branch to remote: $branch_name"
  else
    echo "This command must be run in a git repo"
    return 1
  fi
}

# create commit message including jira ticket ID from branch name
gcj() {
  # Ensure we're inside a Git repository
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    echo "This command must be run in a git repository."
    return 1
  fi

  # Extract the JIRA ticket ID from the current branch name
  local branch_name=$(git rev-parse --abbrev-ref HEAD)
  local jira_ticket=$(echo "$branch_name" | grep -oE '[A-Za-z]+-\d+' | head -n 1)

  if [[ -z $jira_ticket ]]; then
    echo "No JIRA ticket ID found in the branch name. Committing without JIRA ticket ID."
    git commit -m "$1"
  else
    local full_message="[$jira_ticket] $1"
    git commit -m "$full_message"
  fi
}

# combined git add and git commit
gagc() {
  git add .
  gc "$1"
}
