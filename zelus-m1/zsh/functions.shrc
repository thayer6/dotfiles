zdbb() {
    cd $HOME/zelus/basketball
    DIR=`find * -maxdepth 0 -type d -print 2> /dev/null | fzf-tmux` \
        && cd "$DIR"
}
zdg() {
  cd $HOME/zelus/general
  DIR=`find * -maxdepth 0 -type d -print 2> /dev/null | fzf-tmux` \
    && cd "$DIR"
}
zdz() {
  cd $HOME/zelus
  DIR=`find * -maxdepth 0 -type d -print 2> /dev/null | fzf-tmux` \
    && cd "$DIR"
}
zdes() {
  cd $HOME/zelus/esports
  DIR=`find * -maxdepth 0 -type d -print 2> /dev/null | fzf-tmux` \
    && cd "$DIR"
}
zgcp() {
  PROJECT=$(gcloud config configurations list --format json | jq -r ".[] | .name" | fzf-tmux)
  gcloud config configurations activate "$PROJECT"
}
model-dev-tag() {
  GIT_TIMESTAMP=$(date -u "+%Y%m%d.%H%M%S");
  if [[ $# -eq 2 ]] ; then
     echo "Tagging and pushing with dev-$1/cthayer/$2-$GIT_TIMESTAMP"
     sleep 3
     git tag dev-$1/cthayer/$2-$GIT_TIMESTAMP
     git push origin dev-$1/cthayer/$2-$GIT_TIMESTAMP
  else
     echo "Error: requires exactly two arguments"
  fi
}
glogone() {
    DEFAULT=10
    NUM_COMMITS="${1:-$DEFAULT}"
    git --no-pager log --oneline -n $NUM_COMMITS
}
killpods() {
    # app=bkrdp-ss, bkrdp-ngss, bkie
    # model=basketball-adjusted-plus-minus
    kubectl delete pods -l $1 
}
killjobs() {
    # app=bkrdp-ss, bkrdp-ngss, bkie
    # model=basketball-adjusted-plus-minus
    kubectl delete jobs -l $1
}
wpod() {
  # Arg $1 - seconds to refresh
  # Arg $2 - part of pod name to grep

    watch -n $1 "kubectl get pod | grep $2"
}
wjob() {
    watch -n $1 "kubectl get job | grep $2"
}
dev-tag() {
  # Arg $1 - sport name
  # Arg $2 - dev tag label typically a JIRA ticket number

  GIT_TIMESTAMP=$(date -u "+%Y%m%d.%H%M%S");
  if [[ $# -eq 2 ]] ; then
     echo "Tagging and pushing with dev-$1-ct-$1-$GIT_TIMESTAMP"
     sleep 3
     git tag dev-$1-ct-$2-$GIT_TIMESTAMP
     git push origin dev-$1-ct-$2-$GIT_TIMESTAMP
  else
    echo "Error: requires two arguments (sport and label)"
  fi
}
release-tag() {
  # Arg $1 - commit SHA to be release tagged
  # Arg $2 - release number
  echo "Checking out and pulling main branch"
  git checkout main
  git pull

  echo "Checking out commit: $1"
  git checkout $1
  git pull origin $1

  GIT_TIMESTAMP=$(date -u "+%Y%m%d.%H%M%S")
  SPORT=basketball
  RELEASE=$2

  echo "Sport: $SPORT; Release: $RELEASE; Timestamp: $GIT_TIMESTAMP"
  echo "Tagging and pushing"
  git tag release-$SPORT-$RELEASE-$GIT_TIMESTAMP
  git push origin release-$SPORT-$RELEASE-$GIT_TIMESTAMP
  echo "Release tag complete"
}
